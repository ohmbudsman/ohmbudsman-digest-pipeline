name: Build-and-Send Digest

on:
  schedule:
    - cron: '05 10 * * *'   # 05:05 CDT daily
  workflow_dispatch:

env:
  TZ: America/Chicago

# ────────────────────────────────────────────────────────────────────────
# 1. INGEST  ─ scrape last-24-h articles from Readwise Reader
# ────────────────────────────────────────────────────────────────────────
jobs:
  ingest:
    runs-on: ubuntu-latest
    env:
      READWISE_TOKEN: ${{ secrets.READWISE_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: System packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc texlive-latex-base texlive-latex-extra \
            texlive-xetex fonts-noto

      - name: Install Poetry deps
        run: |
          pip install poetry
          poetry install --no-root

      - name: Fetch Reader articles
        run: poetry run python src/fetch_summaries.py

      - name: Upload articles-json
        uses: actions/upload-artifact@v4
        with:
          name: articles-json
          path: output/articles.json
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────
# 2. RENDER ─ GPT→Markdown → PDF, push PDF to gh-pages, expose URL
# ────────────────────────────────────────────────────────────────────────
  render:
    needs: ingest
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    outputs:
      pdf_url: ${{ steps.upload-to-pages.outputs.url }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: System packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc texlive-latex-base texlive-latex-extra \
            texlive-xetex fonts-noto

      - name: Install Poetry deps
        run: |
          pip install poetry
          poetry install --no-root

      - name: Download articles-json
        uses: actions/download-artifact@v4
        with:
          name: articles-json
          path: .

      - name: Ensure output/articles.json exists
        run: |
          mkdir -p output
          [ -f output/articles.json ] || mv articles.json output/articles.json

      - name: Render PDF
        run: poetry run python src/render_pdf.py

      # ── push to gh-pages and emit URL ──────────────────────────────
      - name: Upload PDF to gh-pages
        id: upload-to-pages
        run: |
          set -e
          PDF_NAME=$(date +'%Y-%m-%d').pdf

          git config --global user.name  "ci-bot"
          git config --global user.email "ci@github"
          git fetch origin gh-pages || git branch gh-pages
          git switch gh-pages

          mkdir -p digests
          cp $GITHUB_WORKSPACE/output/digest.pdf digests/$PDF_NAME
          git add digests/$PDF_NAME
          git commit -m "Add digest $PDF_NAME (run $GITHUB_RUN_ID)" || true
          git push origin gh-pages

          URL="https://ohmbudsman.github.io/ohmbudsman-digest-pipeline/digests/$PDF_NAME"
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest
          path: output/digest.pdf
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────
# 3. PUBLISH ─ send email with live PDF link
# ────────────────────────────────────────────────────────────────────────
  publish:
    needs: render
    runs-on: ubuntu-latest
    env:
      BUTTONDOWN_TOKEN: ${{ secrets.BUTTONDOWN_TOKEN }}
      PDF_URL:          ${{ needs.render.outputs.pdf_url }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Install Poetry deps
        run: |
          pip install poetry
          poetry install --no-root

      - name: Send Digest via Buttondown
        run: poetry run python src/send_digest.py
